//幸运数之和

#include <cstdio>
#include <iostream>
#include <cmath>
#include <algorithm>

using namespace std;


int main(){
    freopen("sum.in", "r", stdin);
    freopen("sum.out", "w", stdout);
    // long long nums[29] = {1,4,44,444,4444,44444,444444,4444444,44444444,444444444,4444444444,44444444444,444444444444,4444444444444,44444444444444,7,77,777,7777,77777,777777,7777777,77777777,777777777,7777777777,77777777777,777777777777,7777777777777,77777777777777}, sum [10000] = {};
    // int count = 0;
    // for (int i = 1; i < 29; i++){
    //     for (int j = i; j < 29; j++){
    //         sum[count] = nums[i] + nums[j];
    //         count++;
    //     }
    // }
    // cout<<count<<endl;
    // sort (sum,sum+count);
    // for (int i = 0; i < count; i ++)
    // cout<<sum[i]<<",";
    long long sums[500] = {8, 11, 14, 48, 51, 81, 84, 88,118, 121, 154, 448, 451, 488, 521, 781, 784, 821, 854, 888, 1221, 1554, 4448, 4451, 4488, 4521, 4888, 5221, 7781, 7784, 7821, 7854, 8221, 8554, 8888, 12221, 15554, 44448, 44451, 44488, 44521, 44888, 45221, 48888, 52221, 77781, 77784, 77821, 77854, 78221, 78554, 82221, 85554, 88888, 122221, 155554, 444448, 444451, 444488, 444521, 444888, 445221, 448888, 452221, 488888, 522221, 777781, 777784, 777821, 777854, 778221, 778554, 782221, 785554, 822221, 855554, 888888, 1222221, 1555554, 4444448, 4444451, 4444488, 4444521, 4444888, 4445221, 4448888, 4452221, 4488888, 4522221, 4888888, 5222221, 7777781, 7777784, 7777821, 7777854, 7778221, 7778554, 7782221, 7785554, 7822221, 7855554, 8222221, 8555554, 8888888, 12222221, 15555554, 44444448, 44444451, 44444488, 44444521, 44444888, 44445221, 44448888, 44452221, 44488888, 44522221, 44888888, 45222221, 48888888, 52222221, 77777781, 77777784, 77777821, 77777854, 77778221, 77778554, 77782221, 77785554, 77822221, 77855554, 78222221, 78555554, 82222221, 85555554, 88888888, 122222221, 155555554, 444444448, 444444451, 444444488, 444444521, 444444888, 444445221, 444448888, 444452221, 444488888, 444522221, 444888888, 445222221, 448888888, 452222221, 488888888, 522222221, 777777781, 777777784, 777777821, 777777854, 777778221, 777778554, 777782221, 777785554, 777822221, 777855554, 778222221, 778555554, 782222221, 785555554, 822222221, 855555554, 888888888, 1222222221, 1555555554, 4444444448, 4444444451, 4444444488, 4444444521, 4444444888, 4444445221, 4444448888, 4444452221, 4444488888, 4444522221, 4444888888, 4445222221, 4448888888, 4452222221, 4488888888, 4522222221, 4888888888, 5222222221, 7777777781, 7777777784, 7777777821, 7777777854, 7777778221, 7777778554, 7777782221, 7777785554, 7777822221, 7777855554, 7778222221, 7778555554, 7782222221, 7785555554, 7822222221, 7855555554, 8222222221, 8555555554, 8888888888, 12222222221, 15555555554, 44444444448, 44444444451, 44444444488, 44444444521, 44444444888, 44444445221, 44444448888, 44444452221, 44444488888, 44444522221, 44444888888, 44445222221, 44448888888, 44452222221, 44488888888, 44522222221, 44888888888, 45222222221, 48888888888, 52222222221, 77777777781, 77777777784, 77777777821, 77777777854, 77777778221, 77777778554, 77777782221, 77777785554, 77777822221, 77777855554, 77778222221, 77778555554, 77782222221, 77785555554, 77822222221, 77855555554, 78222222221, 78555555554, 82222222221, 85555555554, 88888888888, 122222222221, 155555555554, 444444444448, 444444444451, 444444444488, 444444444521, 444444444888, 444444445221, 444444448888, 444444452221, 444444488888, 444444522221, 444444888888, 444445222221, 444448888888, 444452222221, 444488888888, 444522222221, 444888888888, 445222222221, 448888888888, 452222222221, 488888888888, 522222222221, 777777777781, 777777777784, 777777777821, 777777777854, 777777778221, 777777778554, 777777782221, 777777785554, 777777822221, 777777855554, 777778222221, 777778555554, 777782222221, 777785555554, 777822222221, 777855555554, 778222222221, 778555555554, 782222222221, 785555555554, 822222222221, 855555555554, 888888888888, 1222222222221, 1555555555554, 4444444444448, 4444444444451, 4444444444488, 4444444444521, 4444444444888, 4444444445221, 4444444448888, 4444444452221, 4444444488888, 4444444522221, 4444444888888, 4444445222221, 4444448888888, 4444452222221, 4444488888888, 4444522222221, 4444888888888, 4445222222221, 4448888888888, 4452222222221, 4488888888888, 4522222222221, 4888888888888, 5222222222221, 7777777777781, 7777777777784, 7777777777821, 7777777777854, 7777777778221, 7777777778554, 7777777782221, 7777777785554, 7777777822221, 7777777855554, 7777778222221, 7777778555554, 7777782222221, 7777785555554, 7777822222221, 7777855555554, 7778222222221, 7778555555554, 7782222222221, 7785555555554, 7822222222221, 7855555555554, 8222222222221, 8555555555554, 8888888888888, 12222222222221, 15555555555554, 44444444444448, 44444444444451, 44444444444488, 44444444444521, 44444444444888, 44444444445221, 44444444448888, 44444444452221, 44444444488888, 44444444522221, 44444444888888, 44444445222221, 44444448888888, 44444452222221, 44444488888888, 44444522222221, 44444888888888, 44445222222221, 44448888888888, 44452222222221, 44488888888888, 44522222222221, 44888888888888, 45222222222221, 48888888888888, 52222222222221, 77777777777781, 77777777777784, 77777777777821, 77777777777854, 77777777778221, 77777777778554, 77777777782221, 77777777785554, 77777777822221, 77777777855554, 77777778222221, 77777778555554, 77777782222221, 77777785555554, 77777822222221, 77777855555554, 77778222222221, 77778555555554, 77782222222221, 77785555555554, 77822222222221, 77855555555554, 78222222222221, 78555555555554, 82222222222221, 85555555555554, 88888888888888, 122222222222221, 155555555555554};
    string s[50];
    int count = 0;
    cin>>s[0];
    while(s[count] != "#"){
        count++;
        cin>>s[count];
    }
    // cout<<count<<endl;
    // cout<<s[i]<<endl;
    for (int i = 0; i < count; i++){
        string a = s[i];
        long long num = {};
        for (int j = 0; j < a.size(); j++){
            if(a[j] == '?'){
                a[j] = '1';
            }
        }
        for (int j = 0; j < a.size(); j++){
            num += (a[j]-48) * pow(10,a.size()-j-1);
        }
        // cout<<num<<endl;
        int low = 0, high = 405, mid = (low+high)/2;
		
		while (sums[mid]!=num && low<high)
		{
			if (sums[mid]<num)
				low = mid + 1;
			else
				high = mid - 1;
			mid = (low+high) / 2;
		}
        // cout<<i<<" "<<mid<<endl;
        if (sums[mid] == num){
            cout<<num<<endl;
            continue;
        } else{
            bool destined = false;
            while(!destined){
                if (num > sums[mid] && mid != 0){
                    mid++;
                } else if (mid == 0) {
                    destined = true;
                } else if (num < sums[mid]){
                    if (num < sums[mid-1]){
                        mid--;
                    } else{
                        destined = true;
                    }
                }
            }
        }
        // cout<<i<<" "<<mid<<endl;
        string temp;
        temp = sums[mid];
        a = num;
        bool out = true;
        for (int k = 0; k < a.size(); k++){
            if (s[i][k] != '?' && a[k] != temp[k]){
                cout<<-1<<endl;
                out = false;
                break;
            }
        }
        
        if (out){
            // cout<<endl;
            cout<<sums[mid]<<endl;
        }
    }
    return 0;
}
